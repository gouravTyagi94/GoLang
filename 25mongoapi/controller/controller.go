package controller

import (
	"context"
	"encoding/json"
	"fmt"
	"log"
	"net/http"

	"github.com/gorilla/mux"
	"github.com/gouravTyagi94/mongoapi/model"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/bson/primitive"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

const connectionString = "mongodb+srv://admin-gourav:admin-gourav@cluster0.bkutx.mongodb.net/?retryWrites=true&w=majority"
const dbName = "netflix"
const collectionName = "watchlist"

//Most Imp
//A reference to the mongo collection
var collection *mongo.Collection

//This init is a special function which will be called only once
func init() {
	//client option
	clientOption := options.Client().ApplyURI(connectionString)

	//connect to mongodb
	//context.TODO-- Whenever we try to connect with some other machines usually databases,
	//we have a provide a context which shows how long we should connect to it and what happens
	//when request goes off and during the connection we need a context on which we can work on.

	//There is also a context.background(), that will keep the connection always alive. It is
	//also widely used, but whenever we dont have any idea regarding which one to chose, we can
	//use context.TODO()
	client, err := mongo.Connect(context.TODO(), clientOption)
	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("MongoDB connection success...")

	collection = client.Database(dbName).Collection(collectionName)

	//collection instance
	fmt.Println("Collection instance is ready")
}

//MongoDb helpers - file

//insert 1 record

// we are writing movie model.Netflix because Netflix struct is located in package model
func insertOneMovie(movie model.Netflix) {
	inserted, err := collection.InsertOne(context.Background(), movie)

	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Inserted 1 movie in the db with id: ", inserted.InsertedID)
}

func updateOneMovie(movieId string) {
	//This converts a hex string into an objectID which is similar
	//to _id generated by mongoDB
	id, err := primitive.ObjectIDFromHex(movieId)

	if err != nil {
		log.Fatal(err)
	}
	//There are 2 methods to filter bson.M and bson.D
	//bson.D is slightly better than other
	filter := bson.M{"_id": id}
	update := bson.M{"$set": bson.M{"watched": true}}
	result, err := collection.UpdateOne(context.Background(), filter, update)

	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("modified count: ", result.ModifiedCount)
}

func deleteOneMovie(movieId string) {
	id, err := primitive.ObjectIDFromHex(movieId)

	if err != nil {
		log.Fatal(err)
	}
	filter := bson.M{"_id": id}
	deleteCount, err := collection.DeleteOne(context.Background(), filter)

	if err != nil {
		log.Fatal(err)
	}
	fmt.Println("Movie got delete with delete count: ", deleteCount)
}

//delete all records
func deleteAllMovies() int64{
	filter := bson.M{}
	deleteResult, err := collection.DeleteMany(context.Background(), filter)

	if err!=nil{
		log.Fatal(err)
	}
	fmt.Println("Number of movies deleted: ", deleteResult.DeletedCount)
	return deleteResult.DeletedCount
}

//get all movies
func getAllMovies() []primitive.M{
	cursor, err := collection.Find(context.Background(), bson.D{{}})
	
	if err!=nil{
		log.Fatal(err)
	}

	//About primitive package
	// Package primitive contains types similar to Go primitives for BSON
	// types that do not have direct Go primitive representations.
	
	
	//movies var is of type primitive.M as the data we would receive
	//will be of bson.M type
	//primitive.M is an unordered representation of bson document.
	var movies []primitive.M
	for cursor.Next(context.Background()){
		var movie bson.M
		err := cursor.Decode(&movie)
		if err!=nil{
			log.Fatal(err)
		}
		movies = append(movies, movie)
	}
	defer cursor.Close(context.Background())
	return movies
}

//Actual controller - file

func GetMyAllMovies(w http.ResponseWriter, r *http.Request){
	w.Header().Set("Content-Type", "application/x-www-form-urlencode")
	allMovies := getAllMovies()
	json.NewEncoder(w).Encode(allMovies)
}

func CreateMovie(w http.ResponseWriter, r *http.Request){
	w.Header().Set("Content-Type", "application/x-www-form-urlencode")

	//Only allow POST requests
	w.Header().Set("Allow-Control-Allow Methods", "POST")

	var movie model.Netflix
	_ = json.NewDecoder(r.Body).Decode(&movie)
	insertOneMovie(movie)
	json.NewEncoder(w).Encode(movie)		
}

func MarkAsWatched(w http.ResponseWriter, r *http.Request){
	w.Header().Set("Content-Type", "application/x-www-form-urlencode")
	w.Header().Set("Allow-Control-Allow Methods", "PUT")

	params := mux.Vars(r)
	updateOneMovie(params["id"])	
	json.NewEncoder(w).Encode("Successfully marked as watched")	
}

func DeleteAMovie(w http.ResponseWriter, r *http.Request){
	w.Header().Set("Content-Type", "application/x-www-form-urlencode")
	w.Header().Set("Allow-Control-Allow Methods", "DELETE")

	params := mux.Vars(r)
	deleteOneMovie(params["id"])
	//returning back the id this time, we can also return a msg only as well
	json.NewEncoder(w).Encode(params["id"])
}


func DeleteAllMovies(w http.ResponseWriter, r *http.Request){
	w.Header().Set("Content-Type", "application/x-www-form-urlencode")
	w.Header().Set("Allow-Control-Allow Methods", "DELETE")

	count := deleteAllMovies()
	//returning back the count this time, we can also return a msg only as well
	json.NewEncoder(w).Encode(count)
}
